%include "io.inc"
;для данного n составить список из n элементов 1, 2, ... n

NULL equ 0
heap_size equ 100

struc node
    elem resb 1
    next resd 1
endstruc

section .bss
    heap resb heap_size * node_size
    heap_ptr resd 1
    listhead resd 1
    
section .text
;инициализация кучи
init_heap:
    push ebp
    mov ebp, esp
    push eax
    push ebx
    push ecx
    
    mov dword [heap_ptr], heap
    mov eax, [heap_ptr]
    mov ecx, heap_size - 1
L:  mov ebx, eax
    add ebx, node_size
    mov [eax + next], ebx
    add eax, node_size
    loop L
    
    mov [eax + next], dword NULL
    
    pop ecx
    pop ebx
    pop eax
    mov esp, ebp
    pop ebp
    ret

;создать новое звено списка
new:
    push ebp
    mov ebp, esp
    push eax
    
    mov edi, [heap_ptr]
    cmp edi, NULL
    je .empty
    mov eax, [edi + next]
    mov [heap_ptr], eax
    mov [edi + next], dword NULL
    jmp .finish
.empty:
    PRINT_STRING 'HEAP IS EMPTY'
.finish:
    pop eax
    mov ebp, esp
    pop ebp
    ret  

;распечатать список
print_list:
    push ebp
    mov ebp, esp
    push eax
    
    mov eax, [ebp + 8]             ;head
M:  cmp eax, NULL
    je .finish
    PRINT_UDEC 1, [eax + elem]
    PRINT_CHAR ' '
    mov eax, [eax + next]
    jmp M
.finish:
    pop eax
    mov esp, ebp
    pop ebp
    ret
    

global CMAIN
CMAIN:
    call init_heap 
    GET_UDEC 4, ecx
    cmp ecx, 0
    je .end 
    mov ebx, 1
    call new
    cmp edi, NULL
    je .end
    mov [listhead], edi
    mov eax, edi
    mov [eax + elem], ebx
.l: cmp ebx, ecx
    je .m
    call new
    cmp edi, NULL
    je .end
    mov [eax + next], edi
    mov eax, edi
    inc ebx
    mov [eax + elem], ebx
    jmp .l
.m: mov dword [eax + next], NULL
    mov eax, [listhead]
    push eax
    call print_list
    add esp, 4
.end:
    xor eax, eax
    ret

